name: CI/CD Pipeline for Terraform and Ansible
on:
  push:
    branches:
      - lucas

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up GCP credentials (from base64)
        run: |
          mkdir -p /home/runner/gcp_credentials
          echo "${{ secrets.GCP_CREDENTIALS_BASE64 }}" | base64 -d > /home/runner/gcp_credentials/credentials.json
          chmod 600 /home/runner/gcp_credentials/credentials.json
          head -n 5 /home/runner/gcp_credentials/credentials.json
          
      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 644 ~/.ssh/id_rsa.pub
          
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          
      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=planfile \
            -var "project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var "region=${{ secrets.GCP_REGION }}" \
            -var "zone=${{ secrets.GCP_ZONE }}" \
            -var "credentials_file_path=/home/runner/gcp_credentials/credentials.json" \
            -var "public_key_path=/home/runner/.ssh/id_rsa.pub"
            
      - name: Terraform Apply and extract VM IP
        run: |
          cd terraform
          terraform apply -auto-approve planfile > /dev/null

          VM_IP=$(terraform output -raw vm_ip | tr -d '\r')
          
          echo "VM_IP extraído: $VM_IP"

          echo "VM_IP=$VM_IP" >> $GITHUB_ENV

          
      - name: Debug IP da VM
        run: echo "IP da VM é $VM_IP"
        
      - name: Set up Ansible and SSH
        run: |
          set -e
          
          # Verificar se temos um IP válido
          if [[ -z "$VM_IP" ]] || [[ ! "$VM_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Erro: VM_IP não contém um IP válido: '$VM_IP'"
            exit 1
          fi
          
          echo "Usando IP da VM: $VM_IP"
          
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ansible sshpass
          if ! command -v ansible >/dev/null; then
            echo "Erro: Ansible não instalado"
            exit 1
          fi
          
          # Adicionar IP ao known_hosts
          echo "Adicionando $VM_IP ao known_hosts..."
          ssh-keyscan -H "$VM_IP" >> ~/.ssh/known_hosts
          
      - name: Run Ansible Playbook with SSH Key
        run: |
          cd ansible
          ansible-playbook playbook.yml \
            --user=ubuntu \
            --private-key=~/.ssh/id_rsa \
            -i "$VM_IP,"
