name: CI/CD Pipeline for Terraform and Ansible

on:
  push:
    branches:
      - lucas

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      - name: Create GCP credentials file
        run: |
          mkdir -p ~/.config/gcloud
          echo '${{ secrets.GCP_CREDENTIALS }}' > ~/.config/gcloud/credentials.json
          # Verifica se o JSON é válido
          jq . ~/.config/gcloud/credentials.json
          chmod 600 ~/.config/gcloud/credentials.json

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply and get VM IP
        id: apply
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var "project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var "region=${{ secrets.GCP_REGION }}" \
            -var "zone=${{ secrets.GCP_ZONE }}"
          terraform output -raw vm_ip > ../vm_ip.txt
          echo "VM_IP=$(cat ../vm_ip.txt)" >> $GITHUB_OUTPUT

      - name: Update Ansible inventory with the new VM IP
        run: |
          NEW_VM_IP=$(cat vm_ip.txt)
          echo "Updating inventory with IP: $NEW_VM_IP"
          cd ansible
          sed -i "s/<ip_da_vm>/$NEW_VM_IP/" inventory.ini
          cat inventory.ini

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Adiciona o host à known_hosts para evitar prompt
          ssh-keyscan $(cat vm_ip.txt) >> ~/.ssh/known_hosts

      - name: Run Ansible Playbook
        run: |
          cd ansible
          ansible-playbook -i inventory.ini playbook.yml --user=YOUR_SSH_USER --key-file=~/.ssh/id_rsa
